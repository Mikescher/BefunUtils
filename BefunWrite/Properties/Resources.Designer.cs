//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BefunWrite.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BefunWrite.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        /// * Example Program II
        /// * 4 Grammar Testing
        /// *
        ///*/
        ///
        ///program example : display[51, 19]
        ///	CONST
        ///		CHAR CHR_UNSET := &apos;@&apos;;
        ///		CHAR CHR_WALL  := &apos;#&apos;;
        ///		CHAR CHR_FLOOR := &apos; &apos;;
        ///		CHAR CHR_PATH  := &apos;+&apos;;
        ///		CHAR[22] TEST := &quot;Example Project 00\r\n\r\n&quot;;
        ///	GLOBAl
        ///		int glubul;
        ///	var 
        ///		char[32] name;
        ///		int i := 0;
        ///	begin
        ///		out &quot;Example Project 00\r\n\r\n&quot;;
        ///		
        ///		getRandAverage(512);
        ///		
        ///		OUT &quot;\r\n&quot;;
        ///
        ///		//Insert Name
        ///		name = getInputStr();
        ///		
        ///		i = 0;
        ///		while (i &lt; 32) do
        ///			out name[i++];
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string example {
            get {
                return ResourceManager.GetString("example", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License
        ///
        ///http://creativecommons.org/licenses/by-nc-sa/4.0/
        ///
        ///By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (&quot;Public License&quot;). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string license {
            get {
                return ResourceManager.GetString("license", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;SyntaxDefinition name=&quot;TextFunge&quot; xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///  &lt;Color name=&quot;Comment&quot; foreground=&quot;Green&quot; /&gt;
        ///  &lt;Color name=&quot;String&quot; foreground=&quot;Blue&quot; /&gt;
        ///  &lt;Color name=&quot;Char&quot; foreground=&quot;Red&quot; /&gt;
        ///  &lt;Color name=&quot;Digit&quot; foreground=&quot;DarkBlue&quot; /&gt;
        ///  
        ///  &lt;!-- This is the main ruleset. --&gt;
        ///  &lt;RuleSet ignoreCase=&quot;true&quot;&gt;
        ///    &lt;Span color=&quot;Comment&quot; begin=&quot;//&quot; /&gt;
        ///    &lt;Span color=&quot;Comment&quot; multiline=&quot;true&quot; begin=&quot;/\*&quot; end=&quot;\*/&quot; /&gt;
        ///    
        ///    &lt;Span color [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TextFunge {
            get {
                return ResourceManager.GetString("TextFunge", resourceCulture);
            }
        }
    }
}
