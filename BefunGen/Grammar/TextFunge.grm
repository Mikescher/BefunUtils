"Name"                  = 'TextFunge'
"Author"                = 'Mikescher'
"Version"               = '2.0'
"About"                 = 'Language to define Benuge-93 programs procedural'

"Case Sensitive"        = False
"Start Symbol"          = <Program>

!###############################################################################

Comment Start          = '/*'
Comment End            = '*/'
Comment Line           = '//'

!###############################################################################
! SETS (FOR SCANNER)
!###############################################################################

{Hex Digit}            = {Digit} + [abcdefABCDEF]
{Oct Digit}            = [01234567]

{UnderscoreLetter}     = {Letter} + {&5F}
{AlphaNumUndescore}    = {AlphaNumeric} + {&5F}

{String Ch}            = {Printable} - ["]
{Char Ch}              = {Printable} - ['']

!######################
! TERMINALS (SCANNER) !
!######################

StringLiteral          = '"'( {String Ch} | '\'{Printable} )* '"'
CharLiteral            = '' ( {Char Ch} | '\'{Printable} )''

Identifier             = {UnderscoreLetter}{AlphaNumUndescore}*

DigitLiteral           = '#'{Digit}
DecLiteral             = '-'?[0123456789]{Digit}*
HexLiteral             = 0x{Hex Digit}+

!#######################
! PRODUCTIONS (PARSER) !
!#######################


<Program>              ::= <Header> <Constants> <GlobalVars> <MainStatements> <MethodList> <Footer>

<Header>               ::= 'program' Identifier
                       |   'program' Identifier ':' 'display' '[' <Literal_Int> ',' <Literal_Int> ']'
<Footer>               ::= 'end'
  
<Constants>            ::= 'const' <VarList>
                       |
                      
<GlobalVars>           ::= 'global' <VarList>
                       |

<MethodList>           ::= <MethodList> <Method>
                       |

<MainStatements>       ::= <MethodBody>

!############
!   METHOD  !
!############


<Method>               ::= <MethodHeader> <MethodBody>

<MethodBody>           ::= <VarDeclBody> <Statement>

<MethodHeader>         ::= <Type> Identifier '(' <ParamDecl> ')'
<VarDeclBody>          ::= 'var' <VarList>
                       |

<ParamDecl>            ::= <ParamList>
                       |

<ParamList>            ::= <ParamList> ',' <Param>
                       |   <Param>

<Param>                ::= <Type> Identifier

<VarList>              ::= <VarList> <VarDecl> ';'
                       |   <VarDecl> ';'
                   
<VarDecl>              ::= <Type> Identifier

                       |   <Type> Identifier ':=' <Literal>

!############
! STATEMENT !
!############

<OptionalSimStatement> ::= <SimpleStatement>
                       |

<Statement>            ::= <SimpleStatement> ';'
                       |   'begin' <StatementList> 'end'
                       |   <Stmt_If>
                       |   <Stmt_While>
                       |   <Stmt_For>
                       |   <Stmt_Repeat>
                       |   <Stmt_Goto> ';'
                       |   <Stmt_Label>
                       |   <Stmt_Switch>

<SimpleStatement>      ::= <Stmt_Quit>
                       |   <Stmt_Return>
                       |   <Stmt_Out>
                       |   <Stmt_In>
                       |   <Stmt_Inc> 
                       |   <Stmt_Assignment>
                       |   <Stmt_Call>
                       |   <Stmt_ModAssignment>

<StatementList>        ::= <StatementList> <Statement>
                       |

<Stmt_Inc>             ::= <ValuePointer> '++'
                       |   <ValuePointer> '--'

<Stmt_Quit>            ::= 'quit' | 'stop' | 'close'

<Stmt_Out>             ::= 'out' <Expression>
                       |   'out' <Literal_String>

<Stmt_In>              ::= 'in' <ValuePointer>

<Stmt_Assignment>      ::= <ValuePointer> '=' <Expression>
                        
<Stmt_ModAssignment>   ::= <ValuePointer> '+=' <Expression>
                       |   <ValuePointer> '-=' <Expression>
                       |   <ValuePointer> '*=' <Expression>
                       |   <ValuePointer> '/=' <Expression>
                       |   <ValuePointer> '%=' <Expression>
                       |   <ValuePointer> '&=' <Expression>
                       |   <ValuePointer> '|=' <Expression>
                       |   <ValuePointer> '^=' <Expression>

<Stmt_Return>          ::= 'return' <Expression>
                       |   'return'

<Stmt_Call>            ::= Identifier '(' <ExpressionList> ')'
                       |   Identifier '(' ')'

!#################
!  CONTROL FLOW  !
!#################


<Stmt_If>              ::= 'if' <Expression> 'then' <StatementList> <Stmt_ElseIfList> 'end'
                        
<Stmt_ElseIfList>      ::= 'elsif' <Expression> 'then' <StatementList> <Stmt_ElseIfList>
                       |   'else' <StatementList>
                       |

<Stmt_While>           ::= 'while' <Expression> 'do' <StatementList> 'end'

<Stmt_For>             ::= 'for' '(' <OptionalSimStatement> ';' <OptionalExpression> ';' <OptionalSimStatement> ')' 'do' <StatementList> 'end'

<Stmt_Repeat>          ::= 'repeat' <StatementList> 'until' '(' <Expression> ')'

<Stmt_Switch>          ::= 'switch' <Expression> 'begin' <Stmt_Switch_CaseList> 'end'
                        
<Stmt_Switch_CaseList> ::= 'case' <Value_Literal> ':' <StatementList> 'end' <Stmt_Switch_CaseList>
                       |   'default' ':' <StatementList> 'end'
                       |

<Stmt_Goto>            ::= 'goto' Identifier

<Stmt_Label>           ::= Identifier ':'

!############
!   TYPES   !
!############


<Type>                 ::= <Type_Int>
                       |   <Type_Digit>
                       |   <Type_Char>
                       |   <Type_Bool>
                       |   <Type_Void>
                       |   <Type_IntArr>
                       |   <Type_String>
                       |   <Type_DigitArr>
                       |   <Type_BoolArr>
                   
<Type_Int>             ::= 'int'  | 'integer'
<Type_Char>            ::= 'char' | 'Character'
<Type_Digit>           ::= 'digit'
<Type_Bool>            ::= 'bool' | 'boolean'
<Type_Void>            ::= 'void'

<Type_IntArr>          ::= <Type_Int>   '[' <Literal_Int> ']'
<Type_String>          ::= <Type_Char>  '[' <Literal_Int> ']'
<Type_DigitArr>        ::= <Type_Digit> '[' <Literal_Int> ']'
<Type_BoolArr>         ::= <Type_Bool>  '[' <Literal_Int> ']'


!#############
!  LITERALS  !
!############+

<Literal>              ::= <Array_Literal>
                       |   <Value_Literal>

<Array_Literal>        ::= <Literal_IntArr>
                       |   <Literal_String>
                       |   <Literal_DigitArr>
                       |   <Literal_BoolArr>

<Value_Literal>        ::= <Literal_Int>
                       |   <Literal_Char>
                       |   <Literal_Bool>
                       |   <Literal_Digit>


<Literal_Int>          ::= DecLiteral |   HexLiteral
<Literal_Char>         ::= CharLiteral
<Literal_Bool>         ::= 'true' | 'false'
<Literal_Digit>        ::= DigitLiteral


<Literal_IntArr>       ::= '{' <Literal_Int_List> '}'
                   
<Literal_String>       ::= '{' <Literal_Char_List> '}'
                       |   StringLiteral
                   
<Literal_DigitArr>     ::= '{' <Literal_Digit_List> '}'
                   
<Literal_BoolArr>      ::= '{' <Literal_Bool_List> '}'


<Literal_Int_List>     ::= <Literal_Int_List> ',' <Literal_Int>
                       |   <Literal_Int>
                   
<Literal_Char_List>    ::= <Literal_Char_List> ',' <Literal_Char>
                       |   <Literal_Char>
                   
<Literal_Digit_List>   ::= <Literal_Digit_List> ',' <Literal_Digit>
                       |   <Literal_Digit>
                   
<Literal_Bool_List>    ::= <Literal_Bool_List> ',' <Literal_Bool>
                       |   <Literal_Bool>

!#############
! EXPRESSION !
!#############

<OptionalExpression>   ::= <Expression>
                       |

<Expression>           ::= <Expr Bool>

<Expr Bool>            ::= <Expr Bool>  '&&' <Expr Eq>
                       |   <Expr Bool>  '||' <Expr Eq>
                       |   <Expr Bool>  '^'  <Expr Eq>
                       |   <Expr Eq>

<Expr Eq>              ::= <Expr Eq>  '==' <Exp Comp>
                       |   <Expr Eq>  '!=' <Exp Comp>
                       |   <Exp Comp>
                   
<Exp Comp>             ::= <Exp Comp> '<'  <Exp Add>
                       |   <Exp Comp> '>'  <Exp Add>
                       |   <Exp Comp> '<=' <Exp Add>
                       |   <Exp Comp> '>=' <Exp Add>
                       |   <Exp Add>
                   
<Exp Add>              ::= <Exp Add>  '+'  <Exp Mult>
                       |   <Exp Add>  '-'  <Exp Mult>
                       |   <Exp Mult>

<Exp Mult>             ::= <Exp Mult> '*'  <Exp Unary>
                       |   <Exp Mult> '/'  <Exp Unary>
                       |   <Exp Mult> '%'  <Exp Unary>
                       |   <Exp Unary>
                   
<Exp Unary>            ::= '!' <Value>
                       |   '-' <Value>
                       |   '(' <Type> ')' <Exp Unary>
                       |   <Value>


<Value>                ::= <Value_Literal>
                       |   <Exp Rand>
                       |   <ValuePointer>
                       |   Identifier '(' <ExpressionList> ')'
                       |   Identifier '(' ')'
                       |   '(' <Expression> ')'
                       |   <ValuePointer> '++'
                       |   <ValuePointer> '--'
                       |   '++' <ValuePointer>
                       |   '--' <ValuePointer>
                       
<Exp Rand>             ::= 'rand'
                       |   'rand' '[' <Expression> ']'

<ExpressionList>       ::= <ExpressionList> ',' <Expression>
                       |  <Expression>

<ValuePointer>         ::= Identifier
                       |   Identifier '[' <Expression> ']'
                       |   'display' '[' <Expression> ',' <Expression> ']'

